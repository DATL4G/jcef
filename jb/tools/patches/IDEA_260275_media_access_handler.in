diff --git a/third_party/cef/CEF_BINARY_ROOT/cef_paths.gypi b/third_party/cef/CEF_BINARY_ROOT/cef_paths.gypi
index a972dea7a..209c73ff1 100644
--- a/third_party/cef/CEF_BINARY_ROOT/cef_paths.gypi
+++ b/third_party/cef/CEF_BINARY_ROOT/cef_paths.gypi
@@ -45,6 +45,7 @@
       'include/cef_keyboard_handler.h',
       'include/cef_life_span_handler.h',
       'include/cef_load_handler.h',
+      'include/cef_media_access_handler.h',
       'include/cef_media_router.h',
       'include/cef_menu_model.h',
       'include/cef_menu_model_delegate.h',
@@ -142,6 +143,7 @@
       'include/capi/cef_keyboard_handler_capi.h',
       'include/capi/cef_life_span_handler_capi.h',
       'include/capi/cef_load_handler_capi.h',
+      'include/capi/cef_media_access_handler_capi.h',
       'include/capi/cef_media_router_capi.h',
       'include/capi/cef_menu_model_capi.h',
       'include/capi/cef_menu_model_delegate_capi.h',
@@ -320,6 +322,10 @@
       'libcef_dll/cpptoc/list_value_cpptoc.h',
       'libcef_dll/ctocpp/load_handler_ctocpp.cc',
       'libcef_dll/ctocpp/load_handler_ctocpp.h',
+      'libcef_dll/cpptoc/media_access_callback_cpptoc.cc',
+      'libcef_dll/cpptoc/media_access_callback_cpptoc.h',
+      'libcef_dll/ctocpp/media_access_handler_ctocpp.cc',
+      'libcef_dll/ctocpp/media_access_handler_ctocpp.h',
       'libcef_dll/ctocpp/media_observer_ctocpp.cc',
       'libcef_dll/ctocpp/media_observer_ctocpp.h',
       'libcef_dll/cpptoc/media_route_cpptoc.cc',
@@ -630,6 +636,10 @@
       'libcef_dll/ctocpp/list_value_ctocpp.h',
       'libcef_dll/cpptoc/load_handler_cpptoc.cc',
       'libcef_dll/cpptoc/load_handler_cpptoc.h',
+      'libcef_dll/ctocpp/media_access_callback_ctocpp.cc',
+      'libcef_dll/ctocpp/media_access_callback_ctocpp.h',
+      'libcef_dll/cpptoc/media_access_handler_cpptoc.cc',
+      'libcef_dll/cpptoc/media_access_handler_cpptoc.h',
       'libcef_dll/cpptoc/media_observer_cpptoc.cc',
       'libcef_dll/cpptoc/media_observer_cpptoc.h',
       'libcef_dll/ctocpp/media_route_ctocpp.cc',
diff --git a/third_party/cef/CEF_BINARY_ROOT/include/capi/cef_client_capi.h b/third_party/cef/CEF_BINARY_ROOT/include/capi/cef_client_capi.h
index a7eb509a2..4c6081e6d 100644
--- a/third_party/cef/CEF_BINARY_ROOT/include/capi/cef_client_capi.h
+++ b/third_party/cef/CEF_BINARY_ROOT/include/capi/cef_client_capi.h
@@ -53,6 +53,7 @@
 #include "include/capi/cef_keyboard_handler_capi.h"
 #include "include/capi/cef_life_span_handler_capi.h"
 #include "include/capi/cef_load_handler_capi.h"
+#include "include/capi/cef_media_access_handler_capi.h"
 #include "include/capi/cef_process_message_capi.h"
 #include "include/capi/cef_render_handler_capi.h"
 #include "include/capi/cef_request_handler_capi.h"
@@ -121,6 +122,13 @@ typedef struct _cef_client_t {
   struct _cef_focus_handler_t*(CEF_CALLBACK* get_focus_handler)(
       struct _cef_client_t* self);
 
+  ///
+  // Return the handler for media access permissions requests. If no handler is
+  // provided media access will be denied by default.
+  ///
+  struct _cef_media_access_handler_t*(CEF_CALLBACK* get_media_access_handler)(
+      struct _cef_client_t* self);
+
   ///
   // Return the handler for JavaScript dialogs. If no handler is provided the
   // default implementation will be used.
diff --git a/third_party/cef/CEF_BINARY_ROOT/include/capi/cef_media_access_handler_capi.h b/third_party/cef/CEF_BINARY_ROOT/include/capi/cef_media_access_handler_capi.h
new file mode 100644
index 000000000..a71337c87
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/include/capi/cef_media_access_handler_capi.h
@@ -0,0 +1,108 @@
+// Copyright (c) 2019 Marshall A. Greenblatt. All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool and should not edited
+// by hand. See the translator.README.txt file in the tools directory for
+// more information.
+//
+// $hash=a60629c549eceecc18914531c81ebf1993787b2d$
+//
+
+#ifndef CEF_INCLUDE_CAPI_CEF_MEDIA_ACCESS_HANDLER_CAPI_H_
+#define CEF_INCLUDE_CAPI_CEF_MEDIA_ACCESS_HANDLER_CAPI_H_
+#pragma once
+
+#include "include/capi/cef_base_capi.h"
+#include "include/capi/cef_browser_capi.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+///
+// Callback structure used for asynchronous continuation of media access
+// permission requests.
+///
+typedef struct _cef_media_access_callback_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Call to allow or deny media access. If this callback was initiated in
+  // response to a getUserMedia (indicated by
+  // CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE and/or
+  // CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE being set) the
+  // |allowed_permissions| are required to match those given in
+  // |required_permissions| in the OnRequestMediaAccessPermission.
+  ///
+  void(CEF_CALLBACK* cont)(struct _cef_media_access_callback_t* self,
+                           int allowed_permissions);
+
+  ///
+  // Cancel the media access request.
+  ///
+  void(CEF_CALLBACK* cancel)(struct _cef_media_access_callback_t* self);
+} cef_media_access_callback_t;
+
+///
+// Implement this structure to handle events related to media access permission
+// requests. The functions of this structure will be called on the browser
+// process UI thread.
+///
+typedef struct _cef_media_access_handler_t {
+  ///
+  // Base structure.
+  ///
+  cef_base_ref_counted_t base;
+
+  ///
+  // Called when a page requests permission to access media. |requesting_url| is
+  // the URL requesting permission. Return true (1) and call
+  // cef_media_access_callback_t::cont() either in this function or at a later
+  // time to continue or cancel the request. Return false (0) to cancel the
+  // request immediately.
+  ///
+  int(CEF_CALLBACK* on_request_media_access_permission)(
+      struct _cef_media_access_handler_t* self,
+      struct _cef_browser_t* browser,
+      struct _cef_frame_t* frame,
+      const cef_string_t* requesting_url,
+      int32_t requested_permissions,
+      struct _cef_media_access_callback_t* callback);
+} cef_media_access_handler_t;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // CEF_INCLUDE_CAPI_CEF_MEDIA_ACCESS_HANDLER_CAPI_H_
diff --git a/third_party/cef/CEF_BINARY_ROOT/include/cef_client.h b/third_party/cef/CEF_BINARY_ROOT/include/cef_client.h
index ada7a6a86..e59c0351f 100644
--- a/third_party/cef/CEF_BINARY_ROOT/include/cef_client.h
+++ b/third_party/cef/CEF_BINARY_ROOT/include/cef_client.h
@@ -51,6 +51,7 @@
 #include "include/cef_keyboard_handler.h"
 #include "include/cef_life_span_handler.h"
 #include "include/cef_load_handler.h"
+#include "include/cef_media_access_handler.h"
 #include "include/cef_process_message.h"
 #include "include/cef_render_handler.h"
 #include "include/cef_request_handler.h"
@@ -114,6 +115,15 @@ class CefClient : public virtual CefBaseRefCounted {
   /*--cef()--*/
   virtual CefRefPtr<CefFocusHandler> GetFocusHandler() { return nullptr; }
 
+  ///
+  // Return the handler for media access permissions requests. If no handler is
+  // provided media access will be denied by default.
+  ///
+  /*--cef()--*/
+  virtual CefRefPtr<CefMediaAccessHandler> GetMediaAccessHandler() {
+    return nullptr;
+  }
+
   ///
   // Return the handler for JavaScript dialogs. If no handler is provided the
   // default implementation will be used.
diff --git a/third_party/cef/CEF_BINARY_ROOT/include/cef_media_access_handler.h b/third_party/cef/CEF_BINARY_ROOT/include/cef_media_access_handler.h
new file mode 100644
index 000000000..1c529a659
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/include/cef_media_access_handler.h
@@ -0,0 +1,125 @@
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions are
+// met:
+//
+//    * Redistributions of source code must retain the above copyright
+// notice, this list of conditions and the following disclaimer.
+//    * Redistributions in binary form must reproduce the above
+// copyright notice, this list of conditions and the following disclaimer
+// in the documentation and/or other materials provided with the
+// distribution.
+//    * Neither the name of Google Inc. nor the name Chromium Embedded
+// Framework nor the names of its contributors may be used to endorse
+// or promote products derived from this software without specific prior
+// written permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+//
+// ---------------------------------------------------------------------------
+//
+// The contents of this file must follow a specific format in order to
+// support the CEF translator tool. See the translator.README.txt file in the
+// tools directory for more information.
+//
+
+#ifndef CEF_INCLUDE_CEF_MEDIA_ACCESS_HANDLER_H_
+#define CEF_INCLUDE_CEF_MEDIA_ACCESS_HANDLER_H_
+#pragma once
+
+#include "include/cef_base.h"
+#include "include/cef_browser.h"
+
+///
+// Represents the state of a setting.
+///
+/*--cef()--*/
+typedef enum {
+  ///
+  // No permission
+  ///
+  CEF_MEDIA_PERMISSION_NONE = 0,
+
+  ///
+  // Audio capture permission
+  ///
+  CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE = 1 << 0,
+
+  ///
+  // Video capture permission
+  ///
+  CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE = 1 << 1,
+
+  ///
+  // Desktop audio capture permission
+  ///
+  CEF_MEDIA_PERMISSION_DESKTOP_AUDIO_CAPTURE = 1 << 2,
+
+  ///
+  // Desktop video capture permission
+  ///
+  CEF_MEDIA_PERMISSION_DESKTOP_VIDEO_CAPTURE = 1 << 3,
+} cef_media_access_permission_types_t;
+
+///
+// Callback interface used for asynchronous continuation of media access
+// permission requests.
+///
+/*--cef(source=library)--*/
+class CefMediaAccessCallback : public virtual CefBaseRefCounted {
+ public:
+  ///
+  // Call to allow or deny media access.
+  // If this callback was initiated in response to a getUserMedia (indicated by
+  // CEF_MEDIA_PERMISSION_DEVICE_AUDIO_CAPTURE and/or
+  // CEF_MEDIA_PERMISSION_DEVICE_VIDEO_CAPTURE being set) the
+  // |allowed_permissions| are required to match those given in
+  // |required_permissions| in the OnRequestMediaAccessPermission.
+  ///
+  /*--cef(capi_name=cont)--*/
+  virtual void Continue(int allowed_permissions) = 0;
+
+  ///
+  // Cancel the media access request.
+  ///
+  /*--cef()--*/
+  virtual void Cancel() = 0;
+};
+
+///
+// Implement this interface to handle events related to media access permission
+// requests. The methods of this class will be called on the browser process UI
+// thread.
+///
+/*--cef(source=client)--*/
+class CefMediaAccessHandler : public virtual CefBaseRefCounted {
+ public:
+  ///
+  // Called when a page requests permission to access media.
+  // |requesting_url| is the URL requesting permission. Return true and call
+  // CefMediaAccessCallback::Continue() either in this method or at a later
+  // time to continue or cancel the request. Return false to cancel the request
+  // immediately.
+  ///
+  /*--cef()--*/
+  virtual bool OnRequestMediaAccessPermission(
+      CefRefPtr<CefBrowser> browser,
+      CefRefPtr<CefFrame> frame,
+      const CefString& requesting_url,
+      int32_t requested_permissions,
+      CefRefPtr<CefMediaAccessCallback> callback) {
+    return false;
+  }
+};
+
+#endif  // CEF_INCLUDE_CEF_MEDIA_ACCESS_HANDLER_H_
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/client_cpptoc.cc b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/client_cpptoc.cc
index 9e54e6aef..8d73fa001 100644
--- a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/client_cpptoc.cc
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/client_cpptoc.cc
@@ -25,6 +25,7 @@
 #include "libcef_dll/cpptoc/keyboard_handler_cpptoc.h"
 #include "libcef_dll/cpptoc/life_span_handler_cpptoc.h"
 #include "libcef_dll/cpptoc/load_handler_cpptoc.h"
+#include "libcef_dll/cpptoc/media_access_handler_cpptoc.h"
 #include "libcef_dll/cpptoc/render_handler_cpptoc.h"
 #include "libcef_dll/cpptoc/request_handler_cpptoc.h"
 #include "libcef_dll/ctocpp/browser_ctocpp.h"
@@ -163,6 +164,22 @@ client_get_focus_handler(struct _cef_client_t* self) {
   return CefFocusHandlerCppToC::Wrap(_retval);
 }
 
+struct _cef_media_access_handler_t* CEF_CALLBACK
+client_get_media_access_handler(struct _cef_client_t* self) {
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return NULL;
+
+  // Execute
+  CefRefPtr<CefMediaAccessHandler> _retval =
+      CefClientCppToC::Get(self)->GetMediaAccessHandler();
+
+  // Return type: refptr_same
+  return CefMediaAccessHandlerCppToC::Wrap(_retval);
+}
+
 struct _cef_jsdialog_handler_t* CEF_CALLBACK
 client_get_jsdialog_handler(struct _cef_client_t* self) {
   // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
@@ -305,6 +322,7 @@ CefClientCppToC::CefClientCppToC() {
   GetStruct()->get_drag_handler = client_get_drag_handler;
   GetStruct()->get_find_handler = client_get_find_handler;
   GetStruct()->get_focus_handler = client_get_focus_handler;
+  GetStruct()->get_media_access_handler = client_get_media_access_handler;
   GetStruct()->get_jsdialog_handler = client_get_jsdialog_handler;
   GetStruct()->get_keyboard_handler = client_get_keyboard_handler;
   GetStruct()->get_life_span_handler = client_get_life_span_handler;
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_callback_cpptoc.cc b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_callback_cpptoc.cc
new file mode 100644
index 000000000..273acce0b
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_callback_cpptoc.cc
@@ -0,0 +1,81 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=e26bdf591e543ed4e107f33400973a9c60dcbdad$
+//
+
+#include "libcef_dll/cpptoc/media_access_callback_cpptoc.h"
+#include "libcef_dll/shutdown_checker.h"
+
+namespace {
+
+// MEMBER FUNCTIONS - Body may be edited by hand.
+
+void CEF_CALLBACK
+media_access_callback_cont(struct _cef_media_access_callback_t* self,
+                           int allowed_permissions) {
+  shutdown_checker::AssertNotShutdown();
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+
+  // Execute
+  CefMediaAccessCallbackCppToC::Get(self)->Continue(allowed_permissions);
+}
+
+void CEF_CALLBACK
+media_access_callback_cancel(struct _cef_media_access_callback_t* self) {
+  shutdown_checker::AssertNotShutdown();
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return;
+
+  // Execute
+  CefMediaAccessCallbackCppToC::Get(self)->Cancel();
+}
+
+}  // namespace
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefMediaAccessCallbackCppToC::CefMediaAccessCallbackCppToC() {
+  GetStruct()->cont = media_access_callback_cont;
+  GetStruct()->cancel = media_access_callback_cancel;
+}
+
+// DESTRUCTOR - Do not edit by hand.
+
+CefMediaAccessCallbackCppToC::~CefMediaAccessCallbackCppToC() {
+  shutdown_checker::AssertNotShutdown();
+}
+
+template <>
+CefRefPtr<CefMediaAccessCallback> CefCppToCRefCounted<
+    CefMediaAccessCallbackCppToC,
+    CefMediaAccessCallback,
+    cef_media_access_callback_t>::UnwrapDerived(CefWrapperType type,
+                                                cef_media_access_callback_t*
+                                                    s) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return nullptr;
+}
+
+template <>
+CefWrapperType CefCppToCRefCounted<CefMediaAccessCallbackCppToC,
+                                   CefMediaAccessCallback,
+                                   cef_media_access_callback_t>::kWrapperType =
+    WT_MEDIA_ACCESS_CALLBACK;
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_callback_cpptoc.h b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_callback_cpptoc.h
new file mode 100644
index 000000000..82f5941fc
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_callback_cpptoc.h
@@ -0,0 +1,34 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=b158e77b5a59d5b45fed01ee1fecb21cc8c5096b$
+//
+
+#ifndef CEF_LIBCEF_DLL_CPPTOC_MEDIA_ACCESS_CALLBACK_CPPTOC_H_
+#define CEF_LIBCEF_DLL_CPPTOC_MEDIA_ACCESS_CALLBACK_CPPTOC_H_
+#pragma once
+
+#include "include/capi/cef_media_access_handler_capi.h"
+#include "include/cef_media_access_handler.h"
+#include "libcef_dll/cpptoc/cpptoc_ref_counted.h"
+
+// Wrap a C++ class with a C structure.
+// This class may be instantiated and accessed DLL-side only.
+class CefMediaAccessCallbackCppToC
+    : public CefCppToCRefCounted<CefMediaAccessCallbackCppToC,
+                                 CefMediaAccessCallback,
+                                 cef_media_access_callback_t> {
+ public:
+  CefMediaAccessCallbackCppToC();
+  virtual ~CefMediaAccessCallbackCppToC();
+};
+
+#endif  // CEF_LIBCEF_DLL_CPPTOC_MEDIA_ACCESS_CALLBACK_CPPTOC_H_
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_handler_cpptoc.cc b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_handler_cpptoc.cc
new file mode 100644
index 000000000..98854c58c
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_handler_cpptoc.cc
@@ -0,0 +1,96 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=298a275ed5579928460fa6a4b0e128dd496ae9ab$
+//
+
+#include "libcef_dll/cpptoc/media_access_handler_cpptoc.h"
+#include "libcef_dll/ctocpp/browser_ctocpp.h"
+#include "libcef_dll/ctocpp/frame_ctocpp.h"
+#include "libcef_dll/ctocpp/media_access_callback_ctocpp.h"
+#include "libcef_dll/shutdown_checker.h"
+
+namespace {
+
+// MEMBER FUNCTIONS - Body may be edited by hand.
+
+int CEF_CALLBACK media_access_handler_on_request_media_access_permission(
+    struct _cef_media_access_handler_t* self,
+    cef_browser_t* browser,
+    cef_frame_t* frame,
+    const cef_string_t* requesting_url,
+    int32_t requested_permissions,
+    cef_media_access_callback_t* callback) {
+  shutdown_checker::AssertNotShutdown();
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  DCHECK(self);
+  if (!self)
+    return 0;
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser);
+  if (!browser)
+    return 0;
+  // Verify param: frame; type: refptr_diff
+  DCHECK(frame);
+  if (!frame)
+    return 0;
+  // Verify param: requesting_url; type: string_byref_const
+  DCHECK(requesting_url);
+  if (!requesting_url)
+    return 0;
+  // Verify param: callback; type: refptr_diff
+  DCHECK(callback);
+  if (!callback)
+    return 0;
+
+  // Execute
+  bool _retval =
+      CefMediaAccessHandlerCppToC::Get(self)->OnRequestMediaAccessPermission(
+          CefBrowserCToCpp::Wrap(browser), CefFrameCToCpp::Wrap(frame),
+          CefString(requesting_url), requested_permissions,
+          CefMediaAccessCallbackCToCpp::Wrap(callback));
+
+  // Return type: bool
+  return _retval;
+}
+
+}  // namespace
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefMediaAccessHandlerCppToC::CefMediaAccessHandlerCppToC() {
+  GetStruct()->on_request_media_access_permission =
+      media_access_handler_on_request_media_access_permission;
+}
+
+// DESTRUCTOR - Do not edit by hand.
+
+CefMediaAccessHandlerCppToC::~CefMediaAccessHandlerCppToC() {
+  shutdown_checker::AssertNotShutdown();
+}
+
+template <>
+CefRefPtr<CefMediaAccessHandler> CefCppToCRefCounted<
+    CefMediaAccessHandlerCppToC,
+    CefMediaAccessHandler,
+    cef_media_access_handler_t>::UnwrapDerived(CefWrapperType type,
+                                               cef_media_access_handler_t* s) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+template <>
+CefWrapperType CefCppToCRefCounted<CefMediaAccessHandlerCppToC,
+                                   CefMediaAccessHandler,
+                                   cef_media_access_handler_t>::kWrapperType =
+    WT_MEDIA_ACCESS_HANDLER;
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_handler_cpptoc.h b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_handler_cpptoc.h
new file mode 100644
index 000000000..da63c35e9
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/cpptoc/media_access_handler_cpptoc.h
@@ -0,0 +1,38 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=a7979f65b05877a1cb2bb126209f309502573f46$
+//
+
+#ifndef CEF_LIBCEF_DLL_CPPTOC_MEDIA_ACCESS_HANDLER_CPPTOC_H_
+#define CEF_LIBCEF_DLL_CPPTOC_MEDIA_ACCESS_HANDLER_CPPTOC_H_
+#pragma once
+
+#if !defined(WRAPPING_CEF_SHARED)
+#error This file can be included wrapper-side only
+#endif
+
+#include "include/capi/cef_media_access_handler_capi.h"
+#include "include/cef_media_access_handler.h"
+#include "libcef_dll/cpptoc/cpptoc_ref_counted.h"
+
+// Wrap a C++ class with a C structure.
+// This class may be instantiated and accessed wrapper-side only.
+class CefMediaAccessHandlerCppToC
+    : public CefCppToCRefCounted<CefMediaAccessHandlerCppToC,
+                                 CefMediaAccessHandler,
+                                 cef_media_access_handler_t> {
+ public:
+  CefMediaAccessHandlerCppToC();
+  virtual ~CefMediaAccessHandlerCppToC();
+};
+
+#endif  // CEF_LIBCEF_DLL_CPPTOC_MEDIA_ACCESS_HANDLER_CPPTOC_H_
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_callback_ctocpp.cc b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_callback_ctocpp.cc
new file mode 100644
index 000000000..a7c12c0e4
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_callback_ctocpp.cc
@@ -0,0 +1,71 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=39328c1f0df371163e025d39e8b08c43c80ad56a$
+//
+
+#include "libcef_dll/ctocpp/media_access_callback_ctocpp.h"
+#include "libcef_dll/shutdown_checker.h"
+
+// VIRTUAL METHODS - Body may be edited by hand.
+
+NO_SANITIZE("cfi-icall")
+void CefMediaAccessCallbackCToCpp::Continue(int allowed_permissions) {
+  shutdown_checker::AssertNotShutdown();
+
+  cef_media_access_callback_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, cont))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  _struct->cont(_struct, allowed_permissions);
+}
+
+NO_SANITIZE("cfi-icall") void CefMediaAccessCallbackCToCpp::Cancel() {
+  shutdown_checker::AssertNotShutdown();
+
+  cef_media_access_callback_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, cancel))
+    return;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Execute
+  _struct->cancel(_struct);
+}
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefMediaAccessCallbackCToCpp::CefMediaAccessCallbackCToCpp() {}
+
+// DESTRUCTOR - Do not edit by hand.
+
+CefMediaAccessCallbackCToCpp::~CefMediaAccessCallbackCToCpp() {
+  shutdown_checker::AssertNotShutdown();
+}
+
+template <>
+cef_media_access_callback_t* CefCToCppRefCounted<
+    CefMediaAccessCallbackCToCpp,
+    CefMediaAccessCallback,
+    cef_media_access_callback_t>::UnwrapDerived(CefWrapperType type,
+                                                CefMediaAccessCallback* c) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+template <>
+CefWrapperType CefCToCppRefCounted<CefMediaAccessCallbackCToCpp,
+                                   CefMediaAccessCallback,
+                                   cef_media_access_callback_t>::kWrapperType =
+    WT_MEDIA_ACCESS_CALLBACK;
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_callback_ctocpp.h b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_callback_ctocpp.h
new file mode 100644
index 000000000..f47e286bb
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_callback_ctocpp.h
@@ -0,0 +1,42 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=33a44932753b7b60007df3c352f80490d30cae73$
+//
+
+#ifndef CEF_LIBCEF_DLL_CTOCPP_MEDIA_ACCESS_CALLBACK_CTOCPP_H_
+#define CEF_LIBCEF_DLL_CTOCPP_MEDIA_ACCESS_CALLBACK_CTOCPP_H_
+#pragma once
+
+#if !defined(WRAPPING_CEF_SHARED)
+#error This file can be included wrapper-side only
+#endif
+
+#include "include/capi/cef_media_access_handler_capi.h"
+#include "include/cef_media_access_handler.h"
+#include "libcef_dll/ctocpp/ctocpp_ref_counted.h"
+
+// Wrap a C structure with a C++ class.
+// This class may be instantiated and accessed wrapper-side only.
+class CefMediaAccessCallbackCToCpp
+    : public CefCToCppRefCounted<CefMediaAccessCallbackCToCpp,
+                                 CefMediaAccessCallback,
+                                 cef_media_access_callback_t> {
+ public:
+  CefMediaAccessCallbackCToCpp();
+  virtual ~CefMediaAccessCallbackCToCpp();
+
+  // CefMediaAccessCallback methods.
+  void Continue(int allowed_permissions) OVERRIDE;
+  void Cancel() OVERRIDE;
+};
+
+#endif  // CEF_LIBCEF_DLL_CTOCPP_MEDIA_ACCESS_CALLBACK_CTOCPP_H_
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_handler_ctocpp.cc b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_handler_ctocpp.cc
new file mode 100644
index 000000000..b22f68473
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_handler_ctocpp.cc
@@ -0,0 +1,89 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=6348331b2632e8797099a33845676a0c26eae785$
+//
+
+#include "libcef_dll/ctocpp/media_access_handler_ctocpp.h"
+#include "libcef_dll/cpptoc/browser_cpptoc.h"
+#include "libcef_dll/cpptoc/frame_cpptoc.h"
+#include "libcef_dll/cpptoc/media_access_callback_cpptoc.h"
+#include "libcef_dll/shutdown_checker.h"
+
+// VIRTUAL METHODS - Body may be edited by hand.
+
+NO_SANITIZE("cfi-icall")
+bool CefMediaAccessHandlerCToCpp::OnRequestMediaAccessPermission(
+    CefRefPtr<CefBrowser> browser,
+    CefRefPtr<CefFrame> frame,
+    const CefString& requesting_url,
+    int32_t requested_permissions,
+    CefRefPtr<CefMediaAccessCallback> callback) {
+  shutdown_checker::AssertNotShutdown();
+
+  cef_media_access_handler_t* _struct = GetStruct();
+  if (CEF_MEMBER_MISSING(_struct, on_request_media_access_permission))
+    return false;
+
+  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING
+
+  // Verify param: browser; type: refptr_diff
+  DCHECK(browser.get());
+  if (!browser.get())
+    return false;
+  // Verify param: frame; type: refptr_diff
+  DCHECK(frame.get());
+  if (!frame.get())
+    return false;
+  // Verify param: requesting_url; type: string_byref_const
+  DCHECK(!requesting_url.empty());
+  if (requesting_url.empty())
+    return false;
+  // Verify param: callback; type: refptr_diff
+  DCHECK(callback.get());
+  if (!callback.get())
+    return false;
+
+  // Execute
+  int _retval = _struct->on_request_media_access_permission(
+      _struct, CefBrowserCppToC::Wrap(browser), CefFrameCppToC::Wrap(frame),
+      requesting_url.GetStruct(), requested_permissions,
+      CefMediaAccessCallbackCppToC::Wrap(callback));
+
+  // Return type: bool
+  return _retval ? true : false;
+}
+
+// CONSTRUCTOR - Do not edit by hand.
+
+CefMediaAccessHandlerCToCpp::CefMediaAccessHandlerCToCpp() {}
+
+// DESTRUCTOR - Do not edit by hand.
+
+CefMediaAccessHandlerCToCpp::~CefMediaAccessHandlerCToCpp() {
+  shutdown_checker::AssertNotShutdown();
+}
+
+template <>
+cef_media_access_handler_t* CefCToCppRefCounted<
+    CefMediaAccessHandlerCToCpp,
+    CefMediaAccessHandler,
+    cef_media_access_handler_t>::UnwrapDerived(CefWrapperType type,
+                                               CefMediaAccessHandler* c) {
+  NOTREACHED() << "Unexpected class type: " << type;
+  return NULL;
+}
+
+template <>
+CefWrapperType CefCToCppRefCounted<CefMediaAccessHandlerCToCpp,
+                                   CefMediaAccessHandler,
+                                   cef_media_access_handler_t>::kWrapperType =
+    WT_MEDIA_ACCESS_HANDLER;
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_handler_ctocpp.h b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_handler_ctocpp.h
new file mode 100644
index 000000000..2d0965eb3
--- /dev/null
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/ctocpp/media_access_handler_ctocpp.h
@@ -0,0 +1,42 @@
+// Copyright (c) 2019 The Chromium Embedded Framework Authors. All rights
+// reserved. Use of this source code is governed by a BSD-style license that
+// can be found in the LICENSE file.
+//
+// ---------------------------------------------------------------------------
+//
+// This file was generated by the CEF translator tool. If making changes by
+// hand only do so within the body of existing method and function
+// implementations. See the translator.README.txt file in the tools directory
+// for more information.
+//
+// $hash=0f155274096d41cc692bb80e4663a705c8a7b4f4$
+//
+
+#ifndef CEF_LIBCEF_DLL_CTOCPP_MEDIA_ACCESS_HANDLER_CTOCPP_H_
+#define CEF_LIBCEF_DLL_CTOCPP_MEDIA_ACCESS_HANDLER_CTOCPP_H_
+#pragma once
+
+#include "include/capi/cef_media_access_handler_capi.h"
+#include "include/cef_media_access_handler.h"
+#include "libcef_dll/ctocpp/ctocpp_ref_counted.h"
+
+// Wrap a C structure with a C++ class.
+// This class may be instantiated and accessed DLL-side only.
+class CefMediaAccessHandlerCToCpp
+    : public CefCToCppRefCounted<CefMediaAccessHandlerCToCpp,
+                                 CefMediaAccessHandler,
+                                 cef_media_access_handler_t> {
+ public:
+  CefMediaAccessHandlerCToCpp();
+  virtual ~CefMediaAccessHandlerCToCpp();
+
+  // CefMediaAccessHandler methods.
+  bool OnRequestMediaAccessPermission(
+      CefRefPtr<CefBrowser> browser,
+      CefRefPtr<CefFrame> frame,
+      const CefString& requesting_url,
+      int32_t requested_permissions,
+      CefRefPtr<CefMediaAccessCallback> callback) override;
+};
+
+#endif  // CEF_LIBCEF_DLL_CTOCPP_MEDIA_ACCESS_HANDLER_CTOCPP_H_
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/wrapper_types.h b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/wrapper_types.h
index 980b90d44..a2704931f 100644
--- a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/wrapper_types.h
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/wrapper_types.h
@@ -75,6 +75,8 @@ enum CefWrapperType {
   WT_LIFE_SPAN_HANDLER,
   WT_LIST_VALUE,
   WT_LOAD_HANDLER,
+  WT_MEDIA_ACCESS_CALLBACK,
+  WT_MEDIA_ACCESS_HANDLER,
   WT_MEDIA_OBSERVER,
   WT_MEDIA_ROUTE,
   WT_MEDIA_ROUTE_CREATE_CALLBACK,
diff --git a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/CMakeLists.txt b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/CMakeLists.txt
--- a/third_party/cef/CEF_BINARY_ROOT/libcef_dll/CMakeLists.txt
+++ b/third_party/cef/CEF_BINARY_ROOT/libcef_dll/CMakeLists.txt
@@ -98,6 +98,10 @@ set(LIBCEF_CPPTOC_SRCS
   cpptoc/life_span_handler_cpptoc.h
   cpptoc/load_handler_cpptoc.cc
   cpptoc/load_handler_cpptoc.h
+  cpptoc/media_access_callback_cpptoc.cc
+  cpptoc/media_access_callback_cpptoc.h
+  cpptoc/media_access_handler_cpptoc.cc
+  cpptoc/media_access_handler_cpptoc.h
   cpptoc/media_observer_cpptoc.cc
   cpptoc/media_observer_cpptoc.h
   cpptoc/media_route_create_callback_cpptoc.cc
@@ -242,6 +246,8 @@ set(LIBCEF_CTOCPP_SRCS
   ctocpp/jsdialog_callback_ctocpp.h
   ctocpp/list_value_ctocpp.cc
   ctocpp/list_value_ctocpp.h
+  ctocpp/media_access_callback_ctocpp.cc
+  ctocpp/media_access_callback_ctocpp.h
   ctocpp/media_route_ctocpp.cc
   ctocpp/media_route_ctocpp.h
   ctocpp/media_router_ctocpp.cc
